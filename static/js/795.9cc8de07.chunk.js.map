{"version":3,"file":"static/js/795.9cc8de07.chunk.js","mappings":"0KACA,G,QAA8B,8BAA9B,EAAqE,yBAArE,EAA2G,4BAA3G,EAAgJ,wBAAhJ,EAAmL,0BAAnL,EAA2N,6B,mBCI9MA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAAGC,WAElC,OACI,gBAAoBC,UAAWC,EAA/B,UACI,SAAC,KAAD,CAASC,GAAIL,EAAMG,UAAW,qBAAEG,SACjBF,EAAa,IAD5B,SAEGL,EAAMQ,QAHHR,EAAME,KCJXO,EAAc,SAACT,GACxB,OACI,gBAAoBI,UAAWC,EAA/B,SACKL,EAAMU,MADDV,EAAME,K,oBCyExB,EAnEoB,SAACF,GACjB,OAAsDW,EAAAA,EAAAA,MAA/CC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAA0BC,EAA3C,EAA+BC,UAAYD,OAM3C,OACI,kBAAME,SAAUH,GAN0B,SAAAI,GAE1CjB,EAAMkB,YAAYD,EAAKE,YAIvB,WACI,4BACI,uCAAcP,EAAS,UAAW,CAC9BQ,SAAU,yBADd,IAOUC,YAAa,kBAEtBP,EAAOK,UAAW,0BAAOL,EAAOK,QAAQA,cAE7C,0BACI,kBAAOG,KAAK,SAASC,MAAO,eCC5C,EA5BgB,SAACvB,GAEb,IAAMwB,EAAcxB,EAAMyB,YAAYC,QAChCC,EAAe3B,EAAMyB,YAAYG,SAEjCC,EAAaL,EAAYM,KAAI,SAAAC,GAAC,OAAI,SAAChC,EAAD,CAAuBS,KAAMuB,EAAEvB,KAAMN,GAAI6B,EAAE7B,IAA1B6B,EAAE7B,OACrD8B,EAAcL,EAAaG,KAAI,SAAAG,GAAC,OAAI,SAACxB,EAAD,CAAwBC,KAAMuB,EAAEvB,KAAMR,GAAI+B,EAAE/B,IAA1B+B,EAAE/B,OAM9D,OACI,iBAAKE,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKwB,KAEL,iBAAKzB,UAAWC,EAAhB,WACI,yBACK2B,KAEL,SAAC,EAAD,CAAad,YAbE,SAACC,GACxBnB,EAAMkB,YAAYC,a,8BC4B1B,GAAee,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAxBoB,SAACC,GACrB,MAAO,CACHX,YAAaW,EAAMX,gBAIA,SAACY,GACxB,MAAO,CACHnB,YAAa,SAACC,GACVkB,GAASnB,EAAAA,EAAAA,GAAYC,SAgB7BmB,EAAAA,EAFJ,CAICC,I,iGC3CKC,EAAO,SAACJ,GACV,MAAO,CACHK,OAAQL,EAAMM,KAAKD,SAyC3B,IArCyB,SAACE,GAStB,OAAOR,EAAAA,EAAAA,IAAQK,EAARL,EANmB,SAACnC,GACvB,IAAOyC,EAAmBzC,EAAnByC,OAAWG,GAAlB,OAA0B5C,EAA1B,GACA,OAAKyC,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUtC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Forms/MessageForm/MessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsPage\":\"Dialogs_dialogsPage__ufDkN\",\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogItem\":\"Dialogs_dialogItem__Gr+yc\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"messageItem\":\"Dialogs_messageItem__cPCfl\"};","import css from '../Dialogs.module.css';\nimport {NavLink} from 'react-router-dom';\nimport React from 'react';\nimport {DialogItemType} from '../../../redux/dialogsReducer';\n\nexport const DialogItem = (props: DialogItemType) => {\n    let path = '/dialogs/' + props.id.toString()\n\n    return (\n        <div key={props.id} className={css.dialogItem}>\n            <NavLink to={path} className={({isActive}) =>\n                isActive ? css.active : ''\n            }>{props.name}</NavLink>\n        </div>\n    )\n}","import css from '../Dialogs.module.css';\nimport React from 'react';\nimport {MessageItemType} from '../../../redux/dialogsReducer';\n\n\nexport const MessageItem = (props: MessageItemType) => {\n    return (\n        <div key={props.id} className={css.messageItem}>\n            {props.text}\n        </div>\n    )\n}","import React from 'react';\n// import {Field, InjectedFormProps, reduxForm} from 'redux-form'\n// import {Textarea} from '../FormsControls/FormsControls';\n// import {maxLengthCreator, required} from '../../../utils/validators/validators';\nimport {SubmitHandler, useForm} from 'react-hook-form';\n\ntype MessageFormType = {\n    sendMessage: (message: string) => void\n}\ntype FormDataType = {\n    message: string\n}\n\nconst MessageForm = (props: MessageFormType) => {\n    const {register, handleSubmit, formState: {errors}} = useForm<FormDataType>();\n    const onSubmit: SubmitHandler<FormDataType> = data => {\n        // console.log(data);\n        props.sendMessage(data.message)\n    }\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <div>\n                <textarea {...register('message', {\n                    required: 'message is required',\n                    // maxLength: {\n                    //     value: 50,\n                    //     message: 'MAX length is 50'\n                    // }\n                })}\n                          placeholder={'message text'}\n                />\n                {errors.message && <span>{errors.message.message}</span>}\n            </div>\n            <div>\n                <input type=\"submit\" value={'Send'}/>\n            </div>\n        </form>\n    );\n}\n\n/*const MessageForm = (props: MessageFormType) => {\n    const onSubmit = (formData: FormDataType) => {\n        // console.log(formData)\n        props.sendMessage(formData.message)\n        // formData.message = ''\n    }\n\n    return (\n        <div>\n            <ReduxForm onSubmit={onSubmit}/>\n        </div>\n    );\n};\n\n\nconst maxLength = maxLengthCreator(50);\n\nconst Form = (props: InjectedFormProps<FormDataType>) => {\n    // const {handleSubmit} = props\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field\n                name=\"message\"\n                component={Textarea}\n                type=\"text\"\n                placeholder={'Enter your message'}\n                validate={[required, maxLength]}\n            />\n        </div>\n        <div>\n            <button type=\"submit\">Send</button>\n        </div>\n    </form>\n}\n\nconst ReduxForm = reduxForm<FormDataType>({\n    form: 'dialogAddMessageForm'\n})(Form)*/\n\nexport default MessageForm;","import React from 'react';\nimport css from './Dialogs.module.css'\nimport {DialogItem} from './DialogItem/DialogItem';\nimport {MessageItem} from './MessageItem/MessageItem';\nimport {DialogsPropsType} from './DialogsContainer';\nimport MessageForm from '../Forms/MessageForm/MessageForm';\n\n\nconst Dialogs = (props: DialogsPropsType) => {\n\n    const dialogsData = props.dialogsPage.dialogs;\n    const messagesData = props.dialogsPage.messages;\n\n    const dialogsJSX = dialogsData.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\n    const messagesJSX = messagesData.map(m => <MessageItem key={m.id} text={m.text} id={m.id}/>)\n\n    const sendMessageHandler = (message: string) => {\n        props.sendMessage(message)\n    }\n\n    return (\n        <div className={css.dialogsPage}>\n            <div className={css.dialogs}>\n                {dialogsJSX}\n            </div>\n            <div className={css.messages}>\n                <div>\n                    {messagesJSX}\n                </div>\n                <MessageForm sendMessage={sendMessageHandler}/>\n            </div>\n\n        </div>\n    );\n};\n\nexport default Dialogs;","import {\n    addMessageAC as sendMessage,\n    DialogsInitialStateType\n} from '../../redux/dialogsReducer';\nimport Dialogs from './Dialogs';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {compose, Dispatch} from 'redux';\nimport WithAuthRedirect from '../../hoc/WithAuthRedirect';\nimport React from 'react';\n\ntype MapStateToPropsType = {\n    dialogsPage: DialogsInitialStateType\n}\n\ntype MapDispatchToPropsType = {\n    sendMessage: (message: string) => void\n}\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        sendMessage: (message: string) => {\n            dispatch(sendMessage(message))\n        },\n    }\n}\n\n/*const mapDispatchToProps = () => {\n    return {\n        onChangeMessage,\n        sendMessage\n    }\n}*/\n\n// const DialogsContainer = WithAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs));\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    WithAuthRedirect\n)\n(Dialogs)","import React from 'react';\nimport {Navigate,} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\nexport type MstpWithAuthRedirectType = ReturnType<typeof mstp>\nconst mstp = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nconst WithAuthRedirect = (Component: React.ElementType) => {\n    // const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n\n    const RedirectComponent = (props: MstpWithAuthRedirectType) => {\n        const {isAuth, ...rest} = props\n        if (!isAuth) return <Navigate to={'/login'}/>\n        return <Component {...rest}/>\n    }\n\n    return connect(mstp)(RedirectComponent)\n};\n\n\n/*const WithAuthRedirect = (Component: React.ElementType) => {\n    // const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n\n    if (!isAuth) {\n        return <Navigate to={'/login'}/>\n    }\n\n    return (props: any) => <Component value={100500} {...props}/>;\n};*/\n\n\n/*let AuthRedirectComponent = (props: any) => {\n    if (!this.props.isAuth) {\n        return <Navigate to={'/login'}/>\n    }\n\n    return <ProfileContainer {...props} />\n}*/\n\n/*function withParams(Component: React.ElementType) {\n    return (props: any) => <Component {...props} params={useParams()}/>;\n}*/\n\nexport default WithAuthRedirect;"],"names":["DialogItem","props","path","id","toString","className","css","to","isActive","name","MessageItem","text","useForm","register","handleSubmit","errors","formState","onSubmit","data","sendMessage","message","required","placeholder","type","value","dialogsData","dialogsPage","dialogs","messagesData","messages","dialogsJSX","map","d","messagesJSX","m","compose","connect","state","dispatch","WithAuthRedirect","Dialogs","mstp","isAuth","auth","Component","rest"],"sourceRoot":""}