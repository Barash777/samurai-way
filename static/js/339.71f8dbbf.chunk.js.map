{"version":3,"file":"static/js/339.71f8dbbf.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/About/About.module.css?dde6","components/Profile/ProfileInfo/About/About.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Forms/PostForm/PostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"topImage\":\"ProfileInfo_topImage__oaZmo\",\"avatar\":\"ProfileInfo_avatar__1VFcV\",\"description\":\"ProfileInfo_description__u7GZ5\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateProfileStatus: (status: string) => void\n    isOwner: boolean\n}\n\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [localStatus, setLocalStatus] = useState<string>(props.status)\n\n    const onSpanDblClick = () => {\n        props.isOwner && setEditMode(true)\n    }\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        setLocalStatus(e.currentTarget.value)\n    }\n\n    const onBlurInput = () => {\n        setNewStatus()\n    }\n\n    const onKeyDownEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            setNewStatus()\n        }\n    }\n\n    const setNewStatus = () => {\n        setEditMode(false)\n        props.updateProfileStatus(localStatus)\n    }\n\n    useEffect(() => {\n        setLocalStatus(props.status)\n    }, [props.status])\n\n    return (\n        <div>\n            <b>status: </b>\n            {editMode\n                ? <input\n                    autoFocus\n                    value={localStatus}\n                    onChange={onChangeInput}\n                    onKeyDown={onKeyDownEnter}\n                    onBlur={onBlurInput}\n                />\n                : <span onDoubleClick={onSpanDblClick}>{props.status || 'No status'}</span>\n            }\n        </div>\n    );\n}\n\nexport default ProfileStatusWithHooks;","// extracted by mini-css-extract-plugin\nexport default {\"aboutMeBlock\":\"About_aboutMeBlock__8hZCk\"};","import {ContactsType, ProfileType} from \"../../../../redux/profileReducer\";\nimport React, {useState} from \"react\";\nimport css from \"./About.module.css\";\nimport {SubmitHandler, useForm} from \"react-hook-form\";\n\ntype AboutPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    saveProfile: (profile: ProfileType) => void\n}\n\nexport const About = ({profile, isOwner, saveProfile}: AboutPropsType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const onButtonEditClickHandler = () => {\n        setEditMode(prev => !prev)\n    }\n\n    if (editMode) {\n        return <AboutForm profile={profile} isOwner={isOwner} editMode={editMode} changeMode={setEditMode}\n                          saveProfile={saveProfile}/>\n    }\n\n    return <div className={css.aboutMeBlock}>\n        {isOwner && !editMode && <button onClick={onButtonEditClickHandler}>Edit profile</button>}\n        <h3>Profile info:</h3>\n        <div>My name is {profile?.fullName}</div>\n        <div>About me: {profile?.aboutMe}</div>\n        {profile.lookingForAJob\n            ? <div>I'm looking for a job!!! {profile.lookingForAJobDescription}</div>\n            : ''}\n        <div>\n            <b>Contacts:</b>\n            {Object.keys(profile.contacts).map((k) => <Contact\n                key={k}\n                title={k}\n                value={profile.contacts[k as keyof ContactsType]}\n            />)}\n        </div>\n    </div>\n}\n\n\ntype AboutFormPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    editMode: boolean\n    changeMode: (editMode: boolean) => void\n    saveProfile: (profile: ProfileType) => void\n}\n\n/*type FormDataType = {\n    fullName: string\n    aboutMe: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    contacts: ContactsType\n}*/\n\n\nexport const AboutForm = ({profile, isOwner, editMode, changeMode, saveProfile}: AboutFormPropsType) => {\n    const {register, handleSubmit, formState: {errors}} = useForm<ProfileType>({\n        mode: 'onTouched'\n    });\n\n    const onSubmit: SubmitHandler<ProfileType> = data => {\n        changeMode(!editMode)\n        saveProfile(data)\n    }\n\n    return <div className={css.aboutMeBlock}>\n        <form onSubmit={handleSubmit(onSubmit)}>\n\n            {isOwner &&\n                <>\n                    {editMode && <input type=\"submit\" value={'Save profile'}/>}\n                </>}\n            <h3>Profile info:</h3>\n            <div>My name is <input {...register('fullName', {\n                required: 'name is required',\n                value: profile?.fullName\n            })} placeholder={'name'}/>\n                {errors.fullName && <span style={{color: 'red'}}>{errors.fullName.message}</span>}\n            </div>\n            <div>About me: <input {...register('aboutMe', {\n                required: 'about me is required',\n                value: profile?.aboutMe\n            })} placeholder={'about me'}/>\n                {errors.aboutMe && <span style={{color: 'red'}}>{errors.aboutMe.message}</span>}\n            </div>\n\n            <div>\n                <textarea {...register('lookingForAJobDescription', {\n                    required: 'looking for a job description is required',\n                    value: profile?.lookingForAJobDescription\n                })} placeholder={'looking for a job description'}/>\n                {errors.lookingForAJobDescription &&\n                    <span style={{color: 'red'}}>{errors.lookingForAJobDescription.message}</span>}\n            </div>\n            <div>\n                <input id={'lookingForAJob'} type={'checkbox'} {...register('lookingForAJob', {\n                    value: profile?.lookingForAJob\n                })}/>\n                <label htmlFor=\"lookingForAJob\">looking for a job?</label>\n            </div>\n            <div>\n                <b>Contacts:</b>\n                {Object.keys(profile.contacts).map((k) => {\n                    const key = k as keyof ContactsType\n                    return <div key={key} style={{marginLeft: '10px'}}>\n                        <b>{key}:</b> <input {...register(`contacts.${key}`, {\n                        value: profile?.contacts[key],\n                        pattern: {\n                            value: /^(ftp|http|https):\\/\\/[^ \"]+$/,\n                            message: 'Write correct URL'\n                        }\n                    })} placeholder={key}/>\n                        {errors.contacts && errors.contacts[key] &&\n                            <span style={{color: 'red'}}>{errors.contacts[key]?.message}</span>}\n                    </div>\n                })}\n            </div>\n        </form>\n    </div>\n}\n\n\ntype ContactPropsType = {\n    title: string\n    value: string\n}\n\nexport const Contact = ({title, value}: ContactPropsType) => {\n    return <div style={{marginLeft: '10px'}}>\n        <b>{title}:</b> {value}\n    </div>\n}","import css from './ProfileInfo.module.css';\nimport React from 'react';\nimport {ProfileType} from '../../../redux/profileReducer';\nimport Preloader from '../../Preloader/Preloader';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport defaultAvatar from \"../../../assets/images/default_avatar.png\";\nimport {About} from \"./About/About\";\n\nexport type ProfileInfoType = {\n    profile: ProfileType,\n    status: string\n    updateProfileStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => void\n}\n\nfunction ProfileInfo(props: ProfileInfoType) {\n    const avaPath = props.profile?.photos?.large || props.profile?.photos?.small || defaultAvatar\n\n    const onPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\n        // console.log('photo selected')\n        const files = e.target.files as FileList;\n        // console.log(files)\n        // console.log(files[0])\n        if (files.length > 0) {\n            const file = files[0]\n            // console.log('save photo')\n            props.savePhoto(file)\n        }\n    }\n\n    if (!props.profile?.userId) {\n        return <Preloader/>\n    }\n\n    return (\n        <>\n            <div className={css.description}>\n                <img className={css.avatar}\n                     src={avaPath}\n                     alt=\"\"/>\n                {props.isOwner && <input type={\"file\"} onChange={onPhotoSelected}/>}\n                <ProfileStatusWithHooks\n                    status={props.status}\n                    updateProfileStatus={props.updateProfileStatus}\n                    isOwner={props.isOwner}\n                />\n            </div>\n\n            <About profile={props.profile} isOwner={props.isOwner} saveProfile={props.saveProfile}/>\n\n        </>\n    );\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__GSiZ2\",\"postsBlock\":\"MyPosts_postsBlock__lB-pf\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport css from './Post.module.css';\nimport {PostType} from '../../../../redux/profileReducer';\n\n\nfunction Post(props: PostType) {\n    return (\n        <div key={props.id} className={css.item}>\n            <img src=\"https://upload.wikimedia.org/wikipedia/ru/thumb/c/ce/Aang.png/280px-Aang.png\" alt=\"\"/>\n            {props.message}\n            <div>{props.likeCount}<span> like(s)</span></div>\n        </div>\n    );\n}\n\nexport default Post;","import React from 'react';\n// import {Field, InjectedFormProps, reduxForm} from 'redux-form'\n// import {maxLengthCreator, required} from '../../../utils/validators/validators';\n// import {Textarea} from '../FormsControls/FormsControls';\nimport {SubmitHandler, useForm} from 'react-hook-form';\n\ntype PostFormType = {\n    addNewPost: (text: string) => void\n}\ntype FormDataType = {\n    text: string\n}\n\nconst PostForm = (props: PostFormType) => {\n    const {register, handleSubmit, formState: {errors}} = useForm<FormDataType>();\n    const onSubmit: SubmitHandler<FormDataType> = data => {\n        // console.log(data);\n        props.addNewPost(data.text)\n    }\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <div>\n                <textarea {...register('text', {\n                    required: 'message is required',\n                    // maxLength: {\n                    //     value: 50,\n                    //     message: 'MAX length is 50'\n                    // }\n                })}\n                          placeholder={'post text'}\n                />\n                {errors.text && <span>{errors.text.message}</span>}\n            </div>\n            <div>\n                <input type=\"submit\" value={'Post'}/>\n            </div>\n        </form>\n    );\n};\n\n/*const PostForm = (props: PostFormType) => {\n    const onSubmit = (formData: FormDataType) => {\n        console.log(formData)\n        props.addNewPost(formData.text)\n    }\n\n    return (\n        <div>\n            <ReduxForm onSubmit={onSubmit}/>\n        </div>\n    );\n};\n\nconst maxLength = maxLengthCreator(10);\n\nconst Form = (props: InjectedFormProps<FormDataType>) => {\n    // const {handleSubmit} = props\n    // const maxLength = maxLengthCreator(10);\n\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field\n                name=\"text\"\n                // component={FormControlMy('textarea')}\n                component={Textarea}\n                type=\"text\"\n                placeholder={'post text'}\n                validate={[required, maxLength]}\n            />\n        </div>\n        <div>\n            <button type=\"submit\">Add post</button>\n        </div>\n    </form>\n}\n\nconst ReduxForm = reduxForm<FormDataType>({\n    form: 'profileAddPostForm'\n})(Form)*/\n\nexport default PostForm;","import React from 'react';\nimport css from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {MyPostsPropsType} from './MyPostsContainer';\nimport PostForm from '../../Forms/PostForm/PostForm';\n\n\nclass MyPosts extends React.PureComponent<MyPostsPropsType> {\n\n    /*componentDidMount() {\n        console.log('MOUNTED')\n        setTimeout(() => {\n            this.setState({\n                a: 15\n            })\n        }, 5000)\n    }*/\n\n    /*componentDidUpdate(prevProps: Readonly<MyPostsPropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        console.log('Updated')\n    }*/\n\n    /*shouldComponentUpdate(nextProps: Readonly<MyPostsPropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\n        console.log('SHOULD UPDATE')\n        return nextProps !== this.props || nextState !== this.state\n    }*/\n\n    render() {\n        // console.log('RENDER')\n\n        const postsData = this.props.posts;\n        const postsJSX = postsData.map(p => <Post key={p.id} id={p.id} message={p.message} likeCount={p.likeCount}/>)\n\n        const onAddPost = (text: string) => {\n            this.props.addPost(text)\n        }\n\n\n        return (\n            <div className={css.postsBlock}>\n                <h3>My posts</h3>\n                <PostForm addNewPost={onAddPost}/>\n                <div className={css.posts}>\n                    {postsJSX}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MyPosts;","import {addPostAC, PostType} from '../../../redux/profileReducer';\nimport MyPosts from './MyPosts';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../../redux/redux-store';\nimport {Dispatch} from 'redux';\n\n\ntype MapStateToPropsType = {\n    posts: Array<PostType>\n}\n\ntype MapDispatchToPropsType = {\n    addPost: (text: string) => void\n}\n\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    posts: state.profilePage.posts\n})\n\n\nconst mapDispatchToProps = (dispatch: /*DispatchType*/ Dispatch): MapDispatchToPropsType => {\n    return {\n        addPost: (text: string) => {\n            dispatch(addPostAC(text))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport {ProfilePropsType} from './ProfileContainer';\nimport {ProfileType} from \"../../redux/profileReducer\";\n\ntype ProfilePropsTypeWithOwner = ProfilePropsType & {\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => void\n}\n\nfunction Profile(props: ProfilePropsTypeWithOwner) {\n\n    // console.log(props)\n\n\n    return (\n        <div>\n            <ProfileInfo\n                profile={props.profile}\n                status={props.status}\n                updateProfileStatus={props.updateProfileStatus}\n                isOwner={props.isOwner}\n                savePhoto={props.savePhoto}\n                saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {\n    getProfileStatusTC,\n    getProfileTC,\n    savePhotoTC,\n    saveProfileTC,\n    updateProfileStatusTC\n} from '../../redux/profileReducer';\nimport {useParams} from 'react-router-dom';\nimport {compose} from 'redux';\nimport WithAuthRedirect from '../../hoc/WithAuthRedirect';\n\n\nclass ProfileContainer extends React.Component<ProfilePropsType> {\n\n    componentDidMount() {\n        this.update()\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props?.params?.userId !== prevProps?.params?.userId) {\n            this.update()\n        }\n    }\n\n    update() {\n        const userId = this.props?.params?.userId ?? this.props.loggedUserId\n        this.props.getProfile(+userId)\n        this.props.getProfileStatus(+userId)\n    }\n\n    /*shouldComponentUpdate(nextProps: Readonly<ProfilePropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\n        // return this.props?.params?.userId !== nextProps?.params?.userId\n    }*/\n\n\n    render() {\n        // console.log('userId = ', this.props?.params?.userId)\n        // console.log('loggedUserId = ', String(this.props.loggedUserId))\n        const isOwner = ((this.props?.params?.userId === undefined && this.props.loggedUserId > 0) ||\n            (this.props?.params?.userId === String(this.props.loggedUserId)))\n\n        return (\n            <Profile {...this.props} isOwner={isOwner}/>\n        );\n    }\n}\n\n\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType & {\n    params: {\n        userId: string\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        isAuth: state.auth.isAuth,\n        loggedUserId: state.auth.userId,\n    }\n}\n\n/*const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        getProfile: (id: number) => {\n            getProfileTC(id)(dispatch)\n        }\n    }\n}*/\n\nconst mapDispatchToProps = () => {\n    return {\n        getProfile: getProfileTC,\n        getProfileStatus: getProfileStatusTC,\n        updateProfileStatus: updateProfileStatusTC,\n        savePhoto: savePhotoTC,\n        saveProfile: saveProfileTC\n    }\n}\n\n\nexport function withParams(Component: React.ElementType) {\n    return (props: any) => <Component {...props} params={useParams()}/>;\n}\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps()),\n    withParams,\n    WithAuthRedirect\n)\n(ProfileContainer)","import React from 'react';\nimport {Navigate,} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\nexport type MstpWithAuthRedirectType = ReturnType<typeof mstp>\nconst mstp = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nconst WithAuthRedirect = (Component: React.ElementType) => {\n    // const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n\n    const RedirectComponent = (props: MstpWithAuthRedirectType) => {\n        const {isAuth, ...rest} = props\n        if (!isAuth) return <Navigate to={'/login'}/>\n        return <Component {...rest}/>\n    }\n\n    return connect(mstp)(RedirectComponent)\n};\n\n\n/*const WithAuthRedirect = (Component: React.ElementType) => {\n    // const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n\n    if (!isAuth) {\n        return <Navigate to={'/login'}/>\n    }\n\n    return (props: any) => <Component value={100500} {...props}/>;\n};*/\n\n\n/*let AuthRedirectComponent = (props: any) => {\n    if (!this.props.isAuth) {\n        return <Navigate to={'/login'}/>\n    }\n\n    return <ProfileContainer {...props} />\n}*/\n\n/*function withParams(Component: React.ElementType) {\n    return (props: any) => <Component {...props} params={useParams()}/>;\n}*/\n\nexport default WithAuthRedirect;"],"names":["props","useState","editMode","setEditMode","status","localStatus","setLocalStatus","setNewStatus","updateProfileStatus","useEffect","autoFocus","value","onChange","e","currentTarget","onKeyDown","key","onBlur","onDoubleClick","isOwner","About","profile","saveProfile","AboutForm","changeMode","className","css","onClick","prev","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","k","Contact","title","useForm","mode","register","handleSubmit","errors","formState","onSubmit","data","type","required","placeholder","style","color","message","id","htmlFor","marginLeft","pattern","avaPath","photos","large","small","defaultAvatar","userId","src","alt","files","target","length","file","savePhoto","Preloader","likeCount","addNewPost","text","MyPosts","postsJSX","this","posts","p","addPost","React","connect","state","profilePage","dispatch","addPostAC","ProfileContainer","update","prevProps","prevState","snapshot","params","loggedUserId","getProfile","getProfileStatus","undefined","String","withParams","Component","useParams","compose","isAuth","auth","getProfileTC","getProfileStatusTC","updateProfileStatusTC","savePhotoTC","saveProfileTC","WithAuthRedirect","mstp","rest","to"],"sourceRoot":""}