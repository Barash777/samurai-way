{"version":3,"file":"static/js/743.d7ed6f29.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Forms/PostForm/PostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"topImage\":\"ProfileInfo_topImage__oaZmo\",\"avatar\":\"ProfileInfo_avatar__1VFcV\",\"description\":\"ProfileInfo_description__u7GZ5\",\"aboutMeBlock\":\"ProfileInfo_aboutMeBlock__NreGH\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateProfileStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [localStatus, setLocalStatus] = useState<string>(props.status)\n\n    const onSpanDblClick = () => {\n        setEditMode(true)\n    }\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        setLocalStatus(e.currentTarget.value)\n    }\n\n    const onBlurInput = () => {\n        setNewStatus()\n    }\n\n    const onKeyDownEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            setNewStatus()\n        }\n    }\n\n    const setNewStatus = () => {\n        setEditMode(false)\n        props.updateProfileStatus(localStatus)\n    }\n\n    useEffect(() => {\n        setLocalStatus(props.status)\n    }, [props.status])\n\n    return (\n        <div>\n            {editMode\n                ? <div>\n                    <input\n                        autoFocus\n                        value={localStatus}\n                        onChange={onChangeInput}\n                        onKeyDown={onKeyDownEnter}\n                        onBlur={onBlurInput}\n                    />\n                </div>\n                : <div>\n                    {/*<span onDoubleClick={this.onSpanDblClick.bind(this)}>{this.state.value}</span>*/}\n                    <span onDoubleClick={onSpanDblClick}>{props.status || 'No status'}</span>\n                </div>}\n        </div>\n    );\n}\n\nexport default ProfileStatusWithHooks;","import css from './ProfileInfo.module.css';\nimport React from 'react';\nimport {ProfileType} from '../../../redux/profileReducer';\nimport Preloader from '../../Preloader/Preloader';\n// import ProfileStatus from './ProfileStatus';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\n\nexport type ProfileInfoType = {\n    profile: ProfileType,\n    status: string\n    updateProfileStatus: (status: string) => void\n}\n\nfunction ProfileInfo(props: ProfileInfoType) {\n    // console.log('ProfileInfo: ', props.profile)\n\n    if (!props.profile?.userId) {\n        return <Preloader/>\n    }\n\n    /*export type ProfileType = {\n        contacts: ContactsType\n        lookingForAJob: boolean\n        lookingForAJobDescription: string\n    }*/\n\n    return (\n        <>\n            {/*<div className={css.topImage}>\n                <img\n                    // src=\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"\n                    src={props.profile?.photos?.large ?? 'https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300'}\n                    alt=\"\"/>\n            </div>*/}\n            <div className={css.description}>\n                <img className={css.avatar}\n                    // src=\"https://cdn.arstechnica.net/wp-content/uploads/2016/02/5718897981_10faa45ac3_b-640x624.jpg\"\n                     src={props.profile?.photos?.small ?? 'https://cdn.arstechnica.net/wp-content/uploads/2016/02/5718897981_10faa45ac3_b-640x624.jpg'}\n                     alt=\"\"/>\n                <ProfileStatusWithHooks\n                    status={props.status}\n                    updateProfileStatus={props.updateProfileStatus}\n                />\n            </div>\n\n\n            <div className={css.aboutMeBlock}>\n                <h3>About me</h3>\n                <p>My name is {props.profile?.fullName}</p>\n                <p>{props.profile?.aboutMe}</p>\n                {props.profile.lookingForAJob\n                    ? <div>I'm looking for a job!!! {props.profile.lookingForAJobDescription}</div>\n                    : ''}\n            </div>\n\n        </>\n    );\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__GSiZ2\",\"postsBlock\":\"MyPosts_postsBlock__lB-pf\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport css from './Post.module.css';\nimport {PostType} from '../../../../redux/profileReducer';\n\n\nfunction Post(props: PostType) {\n    return (\n        <div key={props.id} className={css.item}>\n            <img src=\"https://upload.wikimedia.org/wikipedia/ru/thumb/c/ce/Aang.png/280px-Aang.png\" alt=\"\"/>\n            {props.message}\n            <div>{props.likeCount}<span> like(s)</span></div>\n        </div>\n    );\n}\n\nexport default Post;","import React from 'react';\n// import {Field, InjectedFormProps, reduxForm} from 'redux-form'\n// import {maxLengthCreator, required} from '../../../utils/validators/validators';\n// import {Textarea} from '../FormsControls/FormsControls';\nimport {SubmitHandler, useForm} from 'react-hook-form';\n\ntype PostFormType = {\n    addNewPost: (text: string) => void\n}\ntype FormDataType = {\n    text: string\n}\n\nconst PostForm = (props: PostFormType) => {\n    const {register, handleSubmit, formState: {errors}} = useForm<FormDataType>();\n    const onSubmit: SubmitHandler<FormDataType> = data => {\n        // console.log(data);\n        props.addNewPost(data.text)\n    }\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <div>\n                <textarea {...register('text', {\n                    required: 'message is required',\n                    // maxLength: {\n                    //     value: 50,\n                    //     message: 'MAX length is 50'\n                    // }\n                })}\n                          placeholder={'post text'}\n                />\n                {errors.text && <span>{errors.text.message}</span>}\n            </div>\n            <div>\n                <input type=\"submit\" value={'Post'}/>\n            </div>\n        </form>\n    );\n};\n\n/*const PostForm = (props: PostFormType) => {\n    const onSubmit = (formData: FormDataType) => {\n        console.log(formData)\n        props.addNewPost(formData.text)\n    }\n\n    return (\n        <div>\n            <ReduxForm onSubmit={onSubmit}/>\n        </div>\n    );\n};\n\nconst maxLength = maxLengthCreator(10);\n\nconst Form = (props: InjectedFormProps<FormDataType>) => {\n    // const {handleSubmit} = props\n    // const maxLength = maxLengthCreator(10);\n\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field\n                name=\"text\"\n                // component={FormControlMy('textarea')}\n                component={Textarea}\n                type=\"text\"\n                placeholder={'post text'}\n                validate={[required, maxLength]}\n            />\n        </div>\n        <div>\n            <button type=\"submit\">Add post</button>\n        </div>\n    </form>\n}\n\nconst ReduxForm = reduxForm<FormDataType>({\n    form: 'profileAddPostForm'\n})(Form)*/\n\nexport default PostForm;","import React from 'react';\nimport css from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {MyPostsPropsType} from './MyPostsContainer';\nimport PostForm from '../../Forms/PostForm/PostForm';\n\n\nclass MyPosts extends React.PureComponent<MyPostsPropsType> {\n\n    /*componentDidMount() {\n        console.log('MOUNTED')\n        setTimeout(() => {\n            this.setState({\n                a: 15\n            })\n        }, 5000)\n    }*/\n\n    /*componentDidUpdate(prevProps: Readonly<MyPostsPropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        console.log('Updated')\n    }*/\n\n    /*shouldComponentUpdate(nextProps: Readonly<MyPostsPropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\n        console.log('SHOULD UPDATE')\n        return nextProps !== this.props || nextState !== this.state\n    }*/\n\n    render() {\n        // console.log('RENDER')\n\n        const postsData = this.props.posts;\n        const postsJSX = postsData.map(p => <Post key={p.id} id={p.id} message={p.message} likeCount={p.likeCount}/>)\n\n        const onAddPost = (text: string) => {\n            this.props.addPost(text)\n        }\n\n\n        return (\n            <div className={css.postsBlock}>\n                <h3>My posts</h3>\n                <PostForm addNewPost={onAddPost}/>\n                <div className={css.posts}>\n                    {postsJSX}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MyPosts;","import {addPostAC, PostType} from '../../../redux/profileReducer';\nimport MyPosts from './MyPosts';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../../redux/redux-store';\nimport {Dispatch} from 'redux';\n\n\ntype MapStateToPropsType = {\n    posts: Array<PostType>\n}\n\ntype MapDispatchToPropsType = {\n    addPost: (text: string) => void\n}\n\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    posts: state.profilePage.posts\n})\n\n\nconst mapDispatchToProps = (dispatch: /*DispatchType*/ Dispatch): MapDispatchToPropsType => {\n    return {\n        addPost: (text: string) => {\n            dispatch(addPostAC(text))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport {ProfilePropsType} from './ProfileContainer';\n\n\nfunction Profile(props: ProfilePropsType) {\n\n    // console.log(props)\n\n\n    return (\n        <div>\n            <ProfileInfo\n                profile={props.profile}\n                status={props.status}\n                updateProfileStatus={props.updateProfileStatus}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {getProfileStatusTC, getProfileTC, updateProfileStatusTC} from '../../redux/profileReducer';\nimport {useParams} from 'react-router-dom';\nimport {compose} from 'redux';\nimport WithAuthRedirect from '../../hoc/WithAuthRedirect';\n\n\nclass ProfileContainer extends React.Component<ProfilePropsType> {\n\n    componentDidMount() {\n        const userId = this.props?.params?.userId ?? this.props.loggedUserId\n        this.props.getProfile(+userId)\n        this.props.getProfileStatus(+userId)\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}/>\n        );\n    }\n}\n\n\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType & {\n    params: {\n        userId: string\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        isAuth: state.auth.isAuth,\n        loggedUserId: state.auth.userId,\n    }\n}\n\n/*const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        getProfile: (id: number) => {\n            getProfileTC(id)(dispatch)\n        }\n    }\n}*/\n\nconst mapDispatchToProps = () => {\n    return {\n        getProfile: getProfileTC,\n        getProfileStatus: getProfileStatusTC,\n        updateProfileStatus: updateProfileStatusTC\n    }\n}\n\n\nexport function withParams(Component: React.ElementType) {\n    return (props: any) => <Component {...props} params={useParams()}/>;\n}\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps()),\n    withParams,\n    WithAuthRedirect\n)\n(ProfileContainer)","import React from 'react';\nimport {Navigate,} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\nexport type MstpWithAuthRedirectType = ReturnType<typeof mstp>\nconst mstp = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nconst WithAuthRedirect = (Component: React.ElementType) => {\n    // const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n\n    const RedirectComponent = (props: MstpWithAuthRedirectType) => {\n        const {isAuth, ...rest} = props\n        if (!isAuth) return <Navigate to={'/login'}/>\n        return <Component {...rest}/>\n    }\n\n    return connect(mstp)(RedirectComponent)\n};\n\n\n/*const WithAuthRedirect = (Component: React.ElementType) => {\n    // const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\n\n    if (!isAuth) {\n        return <Navigate to={'/login'}/>\n    }\n\n    return (props: any) => <Component value={100500} {...props}/>;\n};*/\n\n\n/*let AuthRedirectComponent = (props: any) => {\n    if (!this.props.isAuth) {\n        return <Navigate to={'/login'}/>\n    }\n\n    return <ProfileContainer {...props} />\n}*/\n\n/*function withParams(Component: React.ElementType) {\n    return (props: any) => <Component {...props} params={useParams()}/>;\n}*/\n\nexport default WithAuthRedirect;"],"names":["props","useState","editMode","setEditMode","status","localStatus","setLocalStatus","setNewStatus","updateProfileStatus","useEffect","autoFocus","value","onChange","e","currentTarget","onKeyDown","key","onBlur","onDoubleClick","profile","userId","className","css","src","photos","small","alt","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Preloader","message","likeCount","id","useForm","register","handleSubmit","errors","formState","onSubmit","data","addNewPost","text","required","placeholder","type","MyPosts","postsJSX","this","posts","map","p","addPost","React","connect","state","profilePage","dispatch","addPostAC","ProfileContainer","params","loggedUserId","getProfile","getProfileStatus","withParams","Component","useParams","compose","isAuth","auth","getProfileTC","getProfileStatusTC","updateProfileStatusTC","WithAuthRedirect","mstp","rest","to"],"sourceRoot":""}